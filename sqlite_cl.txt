 🗄️ SQLite Command Reference

  Accessing Your Database

  cd /Users/oeoi/Desktop/s_retreat_2025
  sqlite3 database/retreat.db

  Basic SQLite Commands

  Database Information

  .help                     -- Show all SQLite commands
  .tables                   -- List all tables
  .schema                   -- Show all table structures
  .schema table_name        -- Show specific table structure
  .headers on               -- Show column headers in output
  .mode column              -- Format output in columns
  .width 10 20 15          -- Set column widths
  .quit                     -- Exit SQLite

  Display Modes

  .mode csv                 -- CSV format
  .mode column              -- Column format (readable)
  .mode insert              -- SQL INSERT statements
  .mode line                -- One value per line
  .mode tabs                -- Tab-separated values

  Data Manipulation Commands

  SELECT (View Data)

  -- View all data from a table
  SELECT * FROM users;
  SELECT * FROM products;
  SELECT * FROM team_inventory;
  SELECT * FROM transactions;

  -- View specific columns
  SELECT username, balance, role FROM users;
  SELECT name, stock_quantity, price FROM products;

  -- Filter data
  SELECT * FROM users WHERE role = 'team_leader';
  SELECT * FROM products WHERE stock_quantity > 0;
  SELECT * FROM team_inventory WHERE team_id = 1;

  -- Count records
  SELECT COUNT(*) FROM users;
  SELECT COUNT(*) FROM team_inventory WHERE team_id = 1;

  -- Join tables
  SELECT u.username, t.name as team_name
  FROM users u
  LEFT JOIN teams t ON u.team_id = t.id;

  -- Team inventory with product names
  SELECT ti.team_id, p.name, ti.quantity, ti.obtained_from
  FROM team_inventory ti
  JOIN products p ON ti.product_id = p.id
  ORDER BY ti.team_id, p.name;

  INSERT (Add Data)

  -- Add a new user
  INSERT INTO users (username, password_hash, role, team_id, balance)
  VALUES ('testuser', 'hashedpassword', 'participant', 1, 100);

  -- Add a new product
  INSERT INTO products (name, description, price, category, stock_quantity, initial_stock)
  VALUES ('Test Item', 'A test product', 50, 'item', 10, 10);

  -- Add money to team inventory
  INSERT INTO team_inventory (team_id, product_id, quantity, obtained_from)
  VALUES (1, 1, 5, 'purchase');

  -- Generate a money code
  INSERT INTO money_codes (code, amount)
  VALUES ('TEST123', 100);

  UPDATE (Modify Data)

  -- Update user balance
  UPDATE users SET balance = 200 WHERE username = 'testuser';

  -- Update product stock
  UPDATE products SET stock_quantity = 15 WHERE name = 'Coffee';

  -- Change user role
  UPDATE users SET role = 'team_leader' WHERE id = 2;

  -- Assign team leader
  UPDATE teams SET leader_id = 2 WHERE id = 1;

  -- Mark money code as used
  UPDATE money_codes SET used = 1, used_by = 2 WHERE code = 'TEST123';

  DELETE (Remove Data)

  -- Delete a specific user
  DELETE FROM users WHERE username = 'testuser';

  -- Delete all transactions for a user
  DELETE FROM transactions WHERE user_id = 5;

  -- Clear team inventory
  DELETE FROM team_inventory WHERE team_id = 1;

  -- Delete unused money codes
  DELETE FROM money_codes WHERE used = 0;

  -- Delete all orders
  DELETE FROM orders;

  Your Database Tables

  Users Table

  -- View all users with their teams
  SELECT u.id, u.username, u.role, u.balance, t.name as team_name
  FROM users u
  LEFT JOIN teams t ON u.team_id = t.id;

  -- Find team leaders
  SELECT * FROM users WHERE role = 'team_leader';

  -- Update user balance
  UPDATE users SET balance = 500 WHERE username = 'admin';

  Products Table

  -- View all products with stock info
  SELECT name, price, stock_quantity, initial_stock, is_active FROM products;

  -- Restock a product
  UPDATE products SET stock_quantity = 20 WHERE name = 'Coffee';

  -- Activate/deactivate products
  UPDATE products SET is_active = 1 WHERE stock_quantity > 0;
  UPDATE products SET is_active = 0 WHERE stock_quantity = 0;

  Team Inventory Table

  -- View team inventory summary
  SELECT
      ti.team_id,
      t.name as team_name,
      p.name as product_name,
      SUM(ti.quantity) as total_quantity,
      ti.obtained_from
  FROM team_inventory ti
  JOIN teams t ON ti.team_id = t.id
  JOIN products p ON ti.product_id = p.id
  GROUP BY ti.team_id, ti.product_id, ti.obtained_from
  ORDER BY ti.team_id;

  -- Give items to a team
  INSERT INTO team_inventory (team_id, product_id, quantity, obtained_from)
  VALUES (1, 1, 3, 'admin_gift');

  Transactions Table

  -- View transaction history
  SELECT
      t.created_at,
      u.username,
      t.type,
      t.amount,
      t.description
  FROM transactions t
  JOIN users u ON t.user_id = u.id
  ORDER BY t.created_at DESC;

  -- Add money to user (create transaction)
  INSERT INTO transactions (user_id, type, amount, description)
  VALUES (2, 'admin_adjustment', 100, 'Admin added bonus money');

  Money Codes Table

  -- View all money codes
  SELECT code, amount, used, used_by, created_at FROM money_codes;

  -- Create new money codes
  INSERT INTO money_codes (code, amount) VALUES
  ('BONUS100', 100),
  ('GIFT50', 50),
  ('REWARD75', 75);

  -- Find unused codes
  SELECT * FROM money_codes WHERE used = 0;

  Useful Complex Queries

  Team Financial Summary

  SELECT
      t.name as team_name,
      COUNT(u.id) as members,
      SUM(u.balance) as total_balance,
      AVG(u.balance) as avg_balance
  FROM teams t
  LEFT JOIN users u ON t.id = u.team_id
  GROUP BY t.id, t.name;

  Inventory Value by Team

  SELECT
      t.name as team_name,
      SUM(ti.quantity * p.price) as inventory_value
  FROM team_inventory ti
  JOIN teams t ON ti.team_id = t.id
  JOIN products p ON ti.product_id = p.id
  GROUP BY ti.team_id, t.name;

  Product Sales Summary

  SELECT
      p.name,
      COUNT(o.id) as orders_count,
      SUM(o.quantity) as total_sold,
      SUM(o.total_price) as revenue
  FROM products p
  LEFT JOIN orders o ON p.id = o.product_id
  GROUP BY p.id, p.name;

  Database Maintenance Commands

  Backup and Restore

  -- Backup (from command line)
  sqlite3 database/retreat.db ".dump" > backup.sql

  -- Restore (from command line)
  sqlite3 new_database.db < backup.sql

  Reset Operations

  -- Clear all user data (keep admin)
  DELETE FROM users WHERE role != 'admin';
  DELETE FROM transactions;
  DELETE FROM orders;
  DELETE FROM team_inventory;
  DELETE FROM donations;
  DELETE FROM money_codes;

  -- Reset product stock
  UPDATE products SET stock_quantity = initial_stock, is_active = 1;

  -- Reset teams
  UPDATE teams SET leader_id = NULL;

  Quick Test Data Creation

  -- Create test users
  INSERT INTO users (username, password_hash, role, team_id, balance) VALUES
  ('alice', 'hash1', 'team_leader', 1, 150),
  ('bob', 'hash2', 'participant', 1, 100),
  ('charlie', 'hash3', 'team_leader', 2, 200);

  -- Create test money codes
  INSERT INTO money_codes (code, amount) VALUES
  ('TEST001', 50),
  ('TEST002', 100),
  ('TEST003', 75);

  -- Give items to teams
  INSERT INTO team_inventory (team_id, product_id, quantity, obtained_from) VALUES
  (1, 1, 2, 'purchase'),
  (1, 2, 3, 'donation'),
  (2, 1, 1, 'purchase');
