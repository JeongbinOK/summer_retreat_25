<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management - Church Retreat 2025</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .navbar-brand { font-weight: bold; }
        .balance-badge { font-size: 1.1em; }
    </style>
</head>
<body class="bg-light">
    <%- include('../partials/navbar', { user: user }) %>

    <main class="container mt-4">
        <div class="row">
            <div class="col-md-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>Product Management</h2>
                    <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createProductModal">
                        Add New Product
                    </button>
                </div>
                
                <div id="products-alert"></div>
                
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Price</th>
                                        <th>Category</th>
                                        <th>Stock</th>
                                        <th>Status</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% products.forEach(product => { %>
                                        <tr>
                                            <td><%= product.name %></td>
                                            <td><%= product.description %></td>
                                            <td>$<%= product.price %></td>
                                            <td><span class="badge bg-secondary"><%= product.category %></span></td>
                                            <td>
                                                <span class="badge bg-<%= (product.stock_quantity || 0) <= 0 ? 'danger' : (product.stock_quantity || 0) <= 5 ? 'warning' : 'success' %>">
                                                    <%= product.stock_quantity || 0 %>
                                                </span>
                                                <button class="btn btn-sm btn-outline-info ms-1" 
                                                        onclick="adjustStock(<%= product.id %>, <%= product.stock_quantity || 0 %>)">
                                                    Adjust
                                                </button>
                                            </td>
                                            <td>
                                                <span class="badge bg-<%= product.is_active ? 'success' : 'danger' %>">
                                                    <%= product.is_active ? 'Active' : 'Inactive' %>
                                                </span>
                                            </td>
                                            <td><%= formatDate(product.created_at) %></td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary me-1" 
                                                        onclick="toggleProduct(<%= product.id %>, <%= !product.is_active %>)">
                                                    <%= product.is_active ? 'Deactivate' : 'Activate' %>
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary me-1" 
                                                        onclick="editProduct(<%= product.id %>, '<%= product.name %>', '<%= product.description %>', <%= product.price %>, '<%= product.category %>', <%= product.stock_quantity || 0 %>)">
                                                    Edit
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        onclick="deleteProduct(<%= product.id %>, '<%= product.name %>')">
                                                    Delete
                                                </button>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Create Product Modal -->
        <div class="modal fade" id="createProductModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add New Product</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="createProductForm">
                            <div class="mb-3">
                                <label for="name" class="form-label">Product Name</label>
                                <input type="text" class="form-control" id="name" name="name" required>
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="price" class="form-label">Price ($)</label>
                                <input type="number" class="form-control" id="price" name="price" min="1" required>
                            </div>
                            <div class="mb-3">
                                <label for="category" class="form-label">Category</label>
                                <select class="form-select" id="category" name="category">
                                    <option value="item">Item</option>
                                    <option value="food">Food</option>
                                    <option value="beverage">Beverage</option>
                                    <option value="service">Service</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="stock_quantity" class="form-label">Initial Stock Quantity</label>
                                <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="10" required>
                                <small class="text-muted">Set to 999 for unlimited items/services</small>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" onclick="createProduct()">Add Product</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Product Modal -->
        <div class="modal fade" id="editProductModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Product</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="editProductForm">
                            <input type="hidden" id="editProductId" name="productId">
                            <div class="mb-3">
                                <label for="editName" class="form-label">Product Name</label>
                                <input type="text" class="form-control" id="editName" name="name" required>
                            </div>
                            <div class="mb-3">
                                <label for="editDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="editDescription" name="description" rows="3"></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="editPrice" class="form-label">Price ($)</label>
                                <input type="number" class="form-control" id="editPrice" name="price" min="1" required>
                            </div>
                            <div class="mb-3">
                                <label for="editCategory" class="form-label">Category</label>
                                <select class="form-select" id="editCategory" name="category">
                                    <option value="item">Item</option>
                                    <option value="food">Food</option>
                                    <option value="beverage">Beverage</option>
                                    <option value="service">Service</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="editStockQuantity" class="form-label">Stock Quantity</label>
                                <input type="number" class="form-control" id="editStockQuantity" name="stock_quantity" min="0">
                                <small class="text-muted">Leave blank to keep current stock</small>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="updateProduct()">Update Product</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stock Adjustment Modal -->
        <div class="modal fade" id="stockModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Adjust Stock</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Current stock: <strong id="currentStock"></strong></p>
                        <form id="stockForm">
                            <input type="hidden" id="stockProductId" name="productId">
                            <div class="mb-3">
                                <label for="stockAction" class="form-label">Action</label>
                                <select class="form-select" id="stockAction" name="type" required>
                                    <option value="set">Set to specific amount</option>
                                    <option value="adjust">Add/Remove from current stock</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="stockValue" class="form-label">Value</label>
                                <input type="number" class="form-control" id="stockValue" name="adjustment" required>
                                <small class="text-muted" id="stockHelp">Enter the new stock amount</small>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-info" onclick="updateStock()">Update Stock</button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        async function createProduct() {
            const form = document.getElementById('createProductForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);
            
            try {
                const response = await fetch('/admin/products', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Product created successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('createProductModal')).hide();
                    form.reset();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert(result.error, 'danger');
                }
            } catch (error) {
                showAlert('Network error', 'danger');
            }
        }

        function editProduct(productId, name, description, price, category, stock) {
            document.getElementById('editProductId').value = productId;
            document.getElementById('editName').value = name;
            document.getElementById('editDescription').value = description;
            document.getElementById('editPrice').value = price;
            document.getElementById('editCategory').value = category;
            document.getElementById('editStockQuantity').value = stock || '';
            
            new bootstrap.Modal(document.getElementById('editProductModal')).show();
        }

        function adjustStock(productId, currentStock) {
            document.getElementById('stockProductId').value = productId;
            document.getElementById('currentStock').textContent = currentStock;
            document.getElementById('stockValue').value = '';
            document.getElementById('stockAction').value = 'set';
            document.getElementById('stockHelp').textContent = 'Enter the new stock amount';
            
            new bootstrap.Modal(document.getElementById('stockModal')).show();
        }

        // Update stock help text when action changes
        document.getElementById('stockAction').addEventListener('change', function() {
            const helpText = document.getElementById('stockHelp');
            if (this.value === 'set') {
                helpText.textContent = 'Enter the new stock amount';
            } else {
                helpText.textContent = 'Enter positive number to add stock, negative to remove';
            }
        });

        async function updateStock() {
            const form = document.getElementById('stockForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);
            const productId = data.productId;
            delete data.productId;
            
            try {
                const response = await fetch(`/admin/products/${productId}/stock`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Stock updated successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('stockModal')).hide();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAlert(result.error, 'danger');
                }
            } catch (error) {
                showAlert('Network error', 'danger');
            }
        }

        async function updateProduct() {
            const form = document.getElementById('editProductForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);
            const productId = data.productId;
            delete data.productId;
            
            try {
                const response = await fetch(`/admin/products/${productId}/edit`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Product updated successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editProductModal')).hide();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert(result.error, 'danger');
                }
            } catch (error) {
                showAlert('Network error', 'danger');
            }
        }

        async function deleteProduct(productId, productName) {
            if (!confirm(`Are you sure you want to delete "${productName}"? This action cannot be undone.`)) {
                return;
            }
            
            try {
                const response = await fetch(`/admin/products/${productId}/delete`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Product deleted successfully!', 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAlert(result.error, 'danger');
                }
            } catch (error) {
                showAlert('Network error', 'danger');
            }
        }

        async function toggleProduct(productId, newStatus) {
            try {
                const response = await fetch(`/admin/products/${productId}/toggle`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ is_active: newStatus })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert(`Product ${newStatus ? 'activated' : 'deactivated'} successfully!`, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAlert(result.error, 'danger');
                }
            } catch (error) {
                showAlert('Network error', 'danger');
            }
        }

        function showAlert(message, type) {
            const alertContainer = document.getElementById('products-alert');
            alertContainer.innerHTML = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
        }

        async function logout() {
            try {
                const response = await fetch('/auth/logout', { method: 'POST' });
                if (response.ok) {
                    window.location.href = '/login';
                }
            } catch (error) {
                console.error('Logout error:', error);
            }
        }
    </script>
</body>
</html>