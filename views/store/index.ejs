<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ïä§ÌÜ†Ïñ¥ - 2025 ÎßêÏîÄÍµêÌöå Ïó¨Î¶ÑÏàòÎ†®Ìöå</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body { 
            font-family: 'Noto Sans KR', sans-serif; 
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }
        .navbar-brand { font-weight: bold; }
        .balance-badge { 
            font-size: 1.3em; 
            background: linear-gradient(45deg, #28a745, #20c997);
            border: none;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }
        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.95);
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.15);
        }
        .product-card {
            overflow: hidden;
        }
        .product-card .card-body {
            position: relative;
        }
        .btn {
            border-radius: 10px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        .btn-primary {
            background: linear-gradient(45deg, #007bff, #0056b3);
            border: none;
        }
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,123,255,0.3);
        }
        .btn-outline-danger:hover {
            transform: none;
        }
        .stock-badge {
            font-size: 0.8em;
        }
        .modal-content {
            border-radius: 15px;
            border: none;
        }
        
        /* Mobile optimizations */
        @media (max-width: 768px) {
            .balance-badge { 
                font-size: 0.9em; 
                display: block;
                margin-top: 0.5rem;
            }
            
            .card .btn {
                min-height: 44px; /* Touch-friendly button size */
                font-size: 0.9rem;
            }
            
            .card-title {
                font-size: 1.1rem;
            }
            
            .card-text {
                font-size: 0.9rem;
            }
            
            /* Make modals mobile-friendly */
            .modal-dialog {
                margin: 0.5rem;
                max-width: calc(100% - 1rem);
            }
            
            .modal-body {
                padding: 1rem 0.75rem;
            }
            
            /* Touch-friendly form inputs */
            .form-control, .form-select {
                min-height: 44px;
                font-size: 16px; /* Prevents zoom on iOS */
            }
            
            /* Responsive button layout */
            .btn-group-mobile {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .btn-group-mobile .btn {
                width: 100%;
            }
        }
        
        /* Improve card spacing on all devices */
        .product-card {
            margin-bottom: 1.5rem;
            transition: transform 0.2s ease-in-out;
        }
        
        .product-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        /* Better stock indicators */
        .stock-badge {
            font-size: 0.8rem;
            font-weight: 600;
        }
    </style>
</head>
<body class="bg-light">
    <%- include('../partials/navbar', { user: user }) %>

    <main class="container mt-4">
        <div class="row">
            <div class="col-md-12">
                <div class="d-flex justify-content-between align-items-start mb-4 flex-wrap">
                    <h2 class="mb-2"><i class="fas fa-store me-2"></i>Ïä§ÌÜ†Ïñ¥</h2>
                    <div class="d-flex flex-column align-items-end">
                        <span class="badge bg-success fs-6 balance-badge">üí∞ $<%= user.balance %></span>
                        <% if (user.role !== 'team_leader' && user.role !== 'admin') { %>
                            <span class="badge bg-warning fs-6 mt-1"><i class="fas fa-crown me-1"></i>Î¶¨Îçî Ï†ÑÏö©</span>
                        <% } %>
                    </div>
                </div>
                
                <div id="store-alert"></div>
                
                <% 
                const categories = [...new Set(products.map(p => p.category))];
                categories.forEach(category => { 
                %>
                    <div class="mb-4">
                        <h4 class="text-capitalize"><%= category %>s</h4>
                        <div class="row">
                            <% 
                            const categoryProducts = products.filter(p => p.category === category);
                            categoryProducts.forEach(product => { 
                            %>
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card h-100 product-card <%= (product.stock_quantity || 0) <= 0 ? 'border-danger' : '' %>">
                                        <div class="card-body d-flex flex-column">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <h5 class="card-title mb-1"><%= product.name %></h5>
                                                <% if ((product.stock_quantity || 0) <= 0) { %>
                                                    <span class="badge bg-danger stock-badge"><i class="fas fa-times-circle me-1"></i>ÌíàÏ†à</span>
                                                <% } else if ((product.stock_quantity || 0) <= 5) { %>
                                                    <span class="badge bg-warning text-dark stock-badge"><i class="fas fa-exclamation-triangle me-1"></i><%= product.stock_quantity %>Í∞ú ÎÇ®Ïùå</span>
                                                <% } else { %>
                                                    <span class="badge bg-success stock-badge"><i class="fas fa-check-circle me-1"></i><%= product.stock_quantity %>Í∞ú</span>
                                                <% } %>
                                            </div>
                                            <p class="card-text flex-grow-1"><%= product.description %></p>
                                            <div class="mt-auto">
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <span class="h5 text-primary mb-0">üí∞ $<%= product.price %></span>
                                                </div>
                                                <div class="d-grid">
                                                    <% if ((product.stock_quantity || 0) <= 0) { %>
                                                        <button class="btn btn-outline-danger" disabled>
                                                            <i class="fas fa-times-circle me-2"></i>ÌíàÏ†à
                                                        </button>
                                                    <% } else if (user.role === 'team_leader' || user.role === 'admin') { %>
                                                        <button class="btn btn-primary" 
                                                                onclick="purchaseItem(<%= product.id %>, '<%= product.name %>', <%= product.price %>)"
                                                                <%= user.balance < product.price ? 'disabled' : '' %>>
                                                            <%= user.balance < product.price ? 'üí∏ ÏûîÏï° Î∂ÄÏ°±' : 'üõí Íµ¨Îß§ÌïòÍ∏∞' %>
                                                        </button>
                                                    <% } else { %>
                                                        <button class="btn btn-outline-secondary" disabled>
                                                            <i class="fas fa-crown me-2"></i>Î¶¨Îçî Ï†ÑÏö©
                                                        </button>
                                                    <% } %>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                <% }); %>
                
                <% if (user.role === 'team_leader' || user.role === 'admin') { %>
                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-gift me-2"></i>ÌåÄ Í∏∞Î∂Ä ÏãúÏä§ÌÖú</h5>
                    </div>
                    <div class="card-body">
                        <p>ÌåÄ Î¶¨ÎçîÎ°úÏÑú Îã§Î•∏ ÌåÄÏóêÍ≤å ÌäπÏ†ï ÏÉÅÌíàÏùÑ Í∏∞Î∂ÄÌïòÏó¨ ÎèÑÏö∏ Ïàò ÏûàÏäµÎãàÎã§!</p>
                        <div class="d-grid">
                            <button class="btn btn-success btn-lg" data-bs-toggle="modal" data-bs-target="#donationModal">
                                <i class="fas fa-gift me-2"></i>ÌåÄÏóêÍ≤å ÏÉÅÌíà Í∏∞Î∂ÄÌïòÍ∏∞
                            </button>
                        </div>
                    </div>
                </div>
                <% } %>
            </div>
        </div>

        <!-- Purchase Confirmation Modal -->
        <div class="modal fade" id="purchaseModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"><i class="fas fa-shopping-cart me-2"></i>Íµ¨Îß§ ÌôïÏù∏</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p><strong id="purchaseItemName"></strong>Î•º <strong id="purchaseItemPrice"></strong>Ïóê Íµ¨Îß§ÌïòÏãúÍ≤†ÏäµÎãàÍπå?</p>
                        <p>ÏÉàÎ°úÏö¥ ÏûîÏï°: <strong id="newBalance"></strong></p>
                    </div>
                    <div class="modal-footer d-flex flex-column flex-sm-row gap-2">
                        <button type="button" class="btn btn-secondary flex-fill" data-bs-dismiss="modal"><i class="fas fa-times me-2"></i>Ï∑®ÏÜå</button>
                        <button type="button" class="btn btn-primary flex-fill" id="confirmPurchase"><i class="fas fa-check me-2"></i>Íµ¨Îß§ ÌôïÏù∏</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Donation Modal -->
        <div class="modal fade" id="donationModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">üéÅ ÌåÄÏóêÍ≤å ÏÉÅÌíà Í∏∞Î∂ÄÌïòÍ∏∞</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle"></i> <strong>ÏÉàÎ°úÏö¥ Í∏∞Î∂Ä Î∞©Ïãù:</strong> ÏÉÅÏ†êÏóêÏÑú ÏßÅÏ†ë Íµ¨Îß§ÌïòÏó¨ Îã§Î•∏ ÌåÄÏóêÍ≤å Í∏∞Î∂ÄÌï©ÎãàÎã§. 
                            Í∏∞Î∂Ä Í∏àÏï°ÏùÄ Í∑ÄÌïòÏùò ÏûîÏï°ÏóêÏÑú Ï∞®Í∞êÎêòÍ≥†, ÏÉÅÌíàÏùÄ Î∞õÎäî ÌåÄÏùò Ïù∏Î≤§ÌÜ†Î¶¨Ïóê Ï∂îÍ∞ÄÎê©ÎãàÎã§.
                        </div>
                        
                        <form id="donationForm">
                            <div class="mb-3">
                                <label for="recipientTeam" class="form-label">Î∞õÎäî ÌåÄ</label>
                                <select class="form-select" id="recipientTeam" name="recipient_team_id" required>
                                    <option value="">ÌåÄÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî...</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="donationProduct" class="form-label">Í∏∞Î∂ÄÌï† ÏÉÅÌíà (ÏÉÅÏ†êÏóêÏÑú Íµ¨Îß§)</label>
                                <select class="form-select" id="donationProduct" name="product_id" required>
                                    <option value="">ÏÉÅÌíàÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî...</option>
                                    <!-- ÎèôÏ†ÅÏúºÎ°ú Î°úÎìúÎê® -->
                                </select>
                                <small class="text-success">‚úÖ ÏÉÅÏ†êÏóêÏÑú ÏßÅÏ†ë Íµ¨Îß§ÌïòÏó¨ Í∏∞Î∂ÄÌï©ÎãàÎã§</small>
                            </div>
                            <div class="mb-3">
                                <label for="donationQuantity" class="form-label">ÏàòÎüâ</label>
                                <input type="number" class="form-control" id="donationQuantity" name="quantity" min="1" value="1" required>
                                <small class="text-muted" id="availableQuantityHelp">Í∏∞Î∂ÄÌï† ÏÉÅÌíàÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</small>
                            </div>
                            <div class="mb-3">
                                <label for="donationMessage" class="form-label">Î©îÏãúÏßÄ (ÏÑ†ÌÉùÏÇ¨Ìï≠)</label>
                                <textarea class="form-control" id="donationMessage" name="message" rows="2" placeholder="Í∏∞Î∂ÄÌïòÎäî Ïù¥Ïú†Î•º ÌåÄÏóêÍ≤å Ï†ÑÌï¥Î≥¥ÏÑ∏Ïöî..."></textarea>
                            </div>
                            
                            <!-- ÎπÑÏö© ÌëúÏãú ÏÑπÏÖò -->
                            <div class="row">
                                <div class="col-6">
                                    <div class="alert alert-primary">
                                        <strong>üí∞ ÌòÑÏû¨ ÏûîÏï°:</strong> $<%= user.balance %>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="alert alert-warning">
                                        <strong>üí∏ Í∏∞Î∂Ä ÎπÑÏö©:</strong> <span id="donationCost">$0</span>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer d-flex flex-column flex-sm-row gap-2">
                        <button type="button" class="btn btn-secondary flex-fill" data-bs-dismiss="modal">‚ùå Ï∑®ÏÜå</button>
                        <button type="button" class="btn btn-success flex-fill" onclick="submitDonation()">
                            üéÅ Í∏∞Î∂ÄÌïòÍ∏∞
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentPurchase = null;

        let storeProducts = [];

        // Load teams and store products for donation (team leaders only)
        document.addEventListener('DOMContentLoaded', async () => {
            <% if (user.role === 'team_leader' || user.role === 'admin') { %>
            try {
                // Load teams
                const teamsResponse = await fetch('/store/teams');
                const teamsResult = await teamsResponse.json();
                
                if (teamsResult.teams) {
                    const select = document.getElementById('recipientTeam');
                    teamsResult.teams.forEach(team => {
                        const option = document.createElement('option');
                        option.value = team.id;
                        option.textContent = team.name;
                        select.appendChild(option);
                    });
                }

                // Load store products for donation
                const productsResponse = await fetch('/store/donation-products');
                const productsResult = await productsResponse.json();
                
                if (productsResult.products) {
                    storeProducts = productsResult.products;
                    updateDonationProductOptions();
                }
            } catch (error) {
                console.error('Error loading teams/products:', error);
            }
            <% } %>
        });

        function updateDonationProductOptions() {
            const productSelect = document.getElementById('donationProduct');
            
            // Clear existing options except first one
            while (productSelect.children.length > 1) {
                productSelect.removeChild(productSelect.lastChild);
            }
            
            // Add store products as donation options
            storeProducts.forEach(product => {
                const option = document.createElement('option');
                option.value = product.id;
                option.textContent = `${product.name} - $${product.price} (Ïû¨Í≥†: ${product.stock_quantity})`;
                option.dataset.price = product.price;
                option.dataset.stock = product.stock_quantity;
                productSelect.appendChild(option);
            });
        }

        // Update quantity limits and cost when product is selected
        document.getElementById('donationProduct').addEventListener('change', function() {
            const productId = parseInt(this.value);
            const quantityInput = document.getElementById('donationQuantity');
            const helpText = document.getElementById('availableQuantityHelp');
            const costDisplay = document.getElementById('donationCost');
            
            if (productId) {
                const product = storeProducts.find(p => p.id === productId);
                if (product) {
                    const maxAffordable = Math.floor(<%= user.balance %> / product.price);
                    const maxQuantity = Math.min(product.stock_quantity, maxAffordable);
                    
                    quantityInput.max = maxQuantity;
                    quantityInput.value = Math.min(1, maxQuantity);
                    
                    if (maxQuantity > 0) {
                        helpText.textContent = `Ïû¨Í≥†: ${product.stock_quantity}Í∞ú, Íµ¨Îß§ Í∞ÄÎä•: ${maxAffordable}Í∞ú (ÏûîÏï°: $<%= user.balance %>)`;
                        helpText.className = 'text-muted';
                    } else {
                        helpText.textContent = maxAffordable === 0 ? 'ÏûîÏï°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§' : 'Ïû¨Í≥†Í∞Ä ÏóÜÏäµÎãàÎã§';
                        helpText.className = 'text-danger';
                    }
                    
                    updateDonationCost();
                } else {
                    quantityInput.max = 0;
                    quantityInput.value = 0;
                    helpText.textContent = 'ÏÉÅÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§';
                    helpText.className = 'text-danger';
                    if (costDisplay) costDisplay.textContent = '$0';
                }
            } else {
                quantityInput.max = '';
                quantityInput.value = 1;
                helpText.textContent = 'Í∏∞Î∂ÄÌï† ÏÉÅÌíàÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî';
                helpText.className = 'text-muted';
                if (costDisplay) costDisplay.textContent = '$0';
            }
        });

        // Update donation cost when quantity changes
        document.getElementById('donationQuantity').addEventListener('input', updateDonationCost);

        function updateDonationCost() {
            const productSelect = document.getElementById('donationProduct');
            const quantityInput = document.getElementById('donationQuantity');
            const costDisplay = document.getElementById('donationCost');
            
            if (!costDisplay) return; // Cost display element might not exist
            
            if (productSelect.value && quantityInput.value) {
                const selectedOption = productSelect.options[productSelect.selectedIndex];
                const price = parseFloat(selectedOption.dataset.price || 0);
                const quantity = parseInt(quantityInput.value || 0);
                const totalCost = price * quantity;
                
                costDisplay.textContent = `$${totalCost}`;
                costDisplay.className = totalCost <= <%= user.balance %> ? 'text-success fw-bold' : 'text-danger fw-bold';
            } else {
                costDisplay.textContent = '$0';
                costDisplay.className = '';
            }
        }

        function purchaseItem(productId, productName, price) {
            currentPurchase = { productId, productName, price };
            
            document.getElementById('purchaseItemName').textContent = productName;
            document.getElementById('purchaseItemPrice').textContent = `$${price}`;
            document.getElementById('newBalance').textContent = `$${<%= user.balance %> - price}`;
            
            new bootstrap.Modal(document.getElementById('purchaseModal')).show();
        }

        document.getElementById('confirmPurchase').addEventListener('click', async () => {
            if (!currentPurchase) return;
            
            try {
                const response = await fetch('/store/purchase', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        product_id: currentPurchase.productId,
                        quantity: 1
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showStoreAlert(result.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('purchaseModal')).hide();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showStoreAlert(result.error, 'danger');
                }
            } catch (error) {
                showStoreAlert('Network error', 'danger');
            }
        });

        async function submitDonation() {
            const form = document.getElementById('donationForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);
            
            // NEW: Validate store purchase for donation
            const productId = parseInt(data.product_id);
            const quantity = parseInt(data.quantity);
            const product = storeProducts.find(p => p.id === productId);
            
            if (!product) {
                showStoreAlert('ÏÑ†ÌÉùÌïú ÏÉÅÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§', 'danger');
                return;
            }
            
            const totalCost = product.price * quantity;
            
            if (totalCost > <%= user.balance %>) {
                showStoreAlert(`ÏûîÏï°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§. ÌïÑÏöî: $${totalCost}, Î≥¥Ïú†: $<%= user.balance %>`, 'danger');
                return;
            }
            
            if (product.stock_quantity < quantity) {
                showStoreAlert(`Ïû¨Í≥†Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§. ÌòÑÏû¨ Ïû¨Í≥†: ${product.stock_quantity}Í∞ú`, 'danger');
                return;
            }
            
            try {
                const response = await fetch('/store/donate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        recipient_team_id: parseInt(data.recipient_team_id),
                        product_id: productId,
                        quantity: quantity,
                        message: data.message
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showStoreAlert(result.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('donationModal')).hide();
                    form.reset();
                    
                    // Update user balance in navbar if result includes new balance
                    if (result.newBalance !== undefined) {
                        const balanceBadge = document.querySelector('.balance-badge');
                        if (balanceBadge) {
                            balanceBadge.textContent = `üí∞ $${result.newBalance}`;
                        }
                    }
                    
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showStoreAlert(result.error, 'danger');
                }
            } catch (error) {
                showStoreAlert('ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§', 'danger');
            }
        }

        function showStoreAlert(message, type) {
            const alertContainer = document.getElementById('store-alert');
            alertContainer.innerHTML = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
        }

        async function logout() {
            try {
                const response = await fetch('/auth/logout', { method: 'POST' });
                if (response.ok) {
                    window.location.href = '/login';
                }
            } catch (error) {
                console.error('Logout error:', error);
            }
        }
    </script>
</body>
</html>